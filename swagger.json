{
	"swagger": "2.0",
	"info": {
		"title": "BAREFOOT NOMAD API",
		"description": "This is team project,Elites team",
		"version": "1.0.0",
		"contact": {
			"name": "Developers",
			"email": "niyonzimadeus2002@gmail.com"
		}
	},

	"schemes": ["HTTP", "HTTPS"],

	"securityDefinitions": {
		"Bearer": {
			"type": "apiKey",
			"name": "Authorization",
			"in": "header"
		},
		"ApiKeyAuth": {
			"type": "apiKey",
			"name": "refreshToken",
			"in": "header"
		}
	},

	"servers": [
		{
			"url": "http://localhost:3000",
			"name": "DEV"
		}
	],

	"paths": {
		"/api/v1": {
			"get": {
				"tag": ["Home"],
				"description": "welcome page",
				"operationId": "getHome",
				"responses": {
					"200": {
						"description": "success"
					}
				}
			}
		},
		"/api/v1/users/register": {
			"post": {
				"tags": ["Authentication"],
				"summary": "This will register a user",
				"description": " ",
				"produces": ["application/json"],
				"parameters": [
					{
						"name": "Body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/Register"
						}
					}
				],
				"responses": {
					"201": {
						"description": "User registered successfully"
					},
					"409": {
						"description": "User with given email already exists"
					},
					"400": {
						"description": "Bad request"
					},
					"500": {
						"description": "Internal server error"
					}
				}
			}
		},
		"/api/v1/users/verifyEmail/{token}": {
			"get": {
				"tags": ["Authentication"],
				"summary": "This end Point will assist to verify a user with a token",
                "description": "This end Point will verify if a user is a really one who received the email",
                "operationId": "Vification User Registered",
				"produces": ["application/json"],
				"parameters": [
					{
						"name": "token",
						"in": "path",
						"required": true
					}
				],
				"responses": {
					"200": {
						"description": "User verified successfully"
					},

					"401": {
						"description": "Unauthorized access"
					},
					"500": {
						"description": "Internal server error"
					}
				}
			}
		},


		"/api/v1/users/login": {
			"post": {
				"tags": ["Authentication"],
				"summary": "This will login a user",
				"description": " ",
				"produces": ["application/json"],
				"parameters": [
					{
						"name": "Body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/Login"
						}
					}
				],
				"responses": {
					"200": {
						"description": "User Loged in successfully"
					},

					"401": {
						"description": "Unauthorized access"
					},
					"500": {
						"description": "Internal server error"
					}
				}
			}
		},
        "/api/v1/users/updateRole/{id}": {
            "patch": {
              "tags": ["Users"],
              "summary": "This will update a role of the user",
              "description": " ",
              "produces": ["application/json"],
              "parameters": [
                {
                  "name": "id",
                  "in": "path",
                  "description": "id",
                  "required": true
                },
                {
                "name": "Body",
                "in": "body",
                "required": true,
                "schema": {
                    "$ref": "#/definitions/UpdateRole"
                  }
                }
              ],
              "responses": {
                "201": {
                  "description": "User role updated successfully"
                },
                
                "400": {
                  "description": "Bad request"
                },
                "500": {
                  "description": "Internal server error"
                }
              },
			  "security": [
				{
				  "Bearer": []
				}
			  ]
             
            }
        },
		"/api/v1/auth/logout": {
			"post": {
				"tag": ["Authentication"],
				"description": "This will signout a user",
				"produces": ["application/json"],
				"parameters": [
					{
						"name": "Authorization",
						"in": "header",
						"description": "Authorization",
						"required": true
					}
				],
				"responses": {
					"205": {
						"description": "success"
					},
					"500": {
						"description": "Internal server error"
					},
					"401": {
						"description": "Bad request"
					}
				}
			}
		},
		"/api/v1/users/refreshToken": {
			"post": {
				"tags": ["Authentication"],
				"summary": "This is to use refresh token in order to create a new access token",
				"description": " ",
				"consumes": ["application/json"],
				"produces": ["application/json"],
				"parameters": [
					{
						"name": "User Update section",
						"in": "body",
						"description": "Update user info",
						"required": true,
						"schema": {
							"$ref": "#/definitions/refreshToken"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Access token created successfuly"
					},
					"400": {
						"description": "Bad request"
					},
					"500": {
						"description": "INternal server error"
					}
				}
			}
		},

		"/api/v1/trips": {
            "post": {
                "tags": ["Trip Request"],
                "summary": "This is the endpoint to request a trip by user",
                "description": "This is the endpoint to request trip by user",
                "operationId": "Addt tripRequest",
                "parameters": [ {
                    "name": "body",
                    "in": "body",
                    "description": "Trip request",
                    "schema": {
                        "$ref": "#/definitions/trip"
                    }

                }],
                "responses": {
                    "201": {
                        "description": "Trip request created successfull"
                    },
                    "400": {
                        "description": "Bad Request"
                    }
                },
                "security": [{
                    "Bearer": []
                }]
            },
			"get": {
                "tags": ["Trip Request"],
                "summary": "This endPoint will retrieve all requests ",
                "description": "This endPoint will retrieve all requests ",
                "operationId": "getAllRequest",

                "responses": {
                    "200": {
                        "description": "Successfully retrieved"
                    },
                    "400": {
                        "description": "Bad Request"
                    }
                },
                "security": [{
                    "Bearer": []
                }]
            }
        },


        "/api/v1/trips/{id}": {

			"get": {
                "tags": ["Trip Request"],
                "summary": "This endPoint will retrieve one request ",
                "description": "This endPoint will retrieve one request ",
                "operationId": "getOneRequest",
				"parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Trip request id",
                        "required": true,
                        "type": "integer"
                    }
                ],

                "responses": {
                    "200": {
                        "description": "Successfully retrieved"
                    },
                    "400": {
                        "description": "Bad Request"
                    }
                },
                "security": [{
                    "Bearer": []
                }]
            },
        
            "delete": {
                "tags": ["Trip Request"],
                "summary": "This end Point will delete the pending request sent by requester",
                "description": "This end Point will delete the pending request sent by requester",
                "operationId": "delete Request",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Trip request id",
                        "required": true,
                        "type": "integer"
                    }
                ],

                "responses": {
                    "204": {
                        "description": "SUCCESSFULLY DELETED"
                    },
                    "404": {
                        "description": "NOT FOUND"
                    }
                },
                "security": [{
                    "Bearer": []
                }]
            },
            "patch": {
                "tags": ["Trip Request"],
                "summary": "update request with pending status",
                "description": " update request with pending status",
                "operationId": "updateRequest",
                "produces": ["application/json"],
                "parameters": [ {
                        "name": "id",
                        "in": "path",
						"required":true,
                        "type": "integer"

                    }, {
                        "name": "body",
                        "in": "body",
						"required":true,
                        "description": "Trip request",
                        "schema": {
                            "$ref": "#/definitions/trip"
                        }

                    }

                ],
                "responses": {
                    "200": {
                        "description": "successfully updated user with given id"
                    },
                    "409": {
                        "description": "please fill in all fields"
                    },
                    "404": {
                        "description": "user you want to update does not exist"
                    }
                },
                "security": [{
                    "Bearer": []
                }]
            }
        },

		"/api/v1/accommodations": {
			"post": {
				"tags": ["Accommodations CRUD Operations"],
				"summary": "Create an accomodation",
				"description": "Create an accomodation",
				"parameters": [
					{
						"name": "accommodationName",
						"in": "formData",
						"description": "Accomodation Name",
						"required": true,
						"type": "string"
					},
					{
						"name": "description",
						"in": "formData",
						"description": "Accomodation description",
						"required": true,
						"type": "string"
					},
					{
						"name": "images",
						"in": "formData",
						"description": "Accomodation images",
						"type": "file"
					},
					{
						"name": "amenities",
						"in": "formData",
						"description": "Accomodation amenities",
						"type": "array"
					},
					{
						"name": "geoCoordinates",
						"in": "formData",
						"description": "Longitute and latitude coordinates of accommodation",
						"type": "array"
					},
					{
						"name": "streetAddress",
						"in": "formData",
						"description": "street number",
						"type": "string",
						"required": true
					},
					{
						"name": "locationId",
						"in": "formData",
						"description": "location where accomodation is",
						"type": "integer",
						"required": true
					}
				],
				"responses": {
					"201": {
						"description": "Accomodation created successfuly!"
					},
					"500": {
						"description": "Server error"
					}
				},
				"security": [
					{
					  "Bearer": []
					}
				  ]
			},
			"get": {
				"tags": ["Accommodations CRUD Operations"],
				"summary": "Get all accommodations",
				"description": "Get all accommodations",
				"responses": {
					"200": {
						"description": "All accommodations retrieved successfuly!"
					}
				}
			}
		},
		"/api/v1/accommodations/in/{locationId}": {
			"get": {
				"tags": ["Accommodations CRUD Operations"],
				"summary": "This will retrieve accomodations in given location",
				"description": " ",
				"produces": ["application/json"],
				"parameters": [
					{
						"name": "locationId",
						"in": "path",
						"description": " Enter the location ID",
						"required": true,
						"type": "integer"
					}
				],
				"responses": {
					"200": {
						"description": "Accomodations retrieved successfully!"
					},
					"404": {
						"description": "no accomodation found with that ID"
					}
				}
			}
		},
		"/api/v1/accommodations/{accommodationId}": {
			"get": {
				"tags": ["Accommodations CRUD Operations"],
				"summary": "This will retrieve accomodation by ID",
				"description": " ",
				"produces": ["application/json"],
				"parameters": [
					{
						"name": "accommodationId",
						"in": "path",
						"description": " Enter the accomodation ID",
						"required": true,
						"type": "integer"
					}
				],
				"responses": {
					"200": {
						"description": "Accomodation retrieved successfully!"
					},
					"404": {
						"description": "no accomodation found with that ID"
					}
				}
			},
			"patch": {
				"tags": ["Accommodations CRUD Operations"],
				"summary": "This will update the accomodation with given ID",
				"description": " ",
				"produces": ["application/json"],
				"parameters": [
					{
						"name": "accommodationId",
						"in": "path",
						"description": " Enter accomodation ID in the path",
						"required": true,
						"type": "integer"
					},
					{
						"name": "accommodationName",
						"in": "formData",
						"description": "Accomodation Name",
						"type": "string"
					},
					{
						"name": "description",
						"in": "formData",
						"description": "Accomodation description",
						"type": "string"
					},
					{
						"name": "images",
						"in": "formData",
						"description": "Accomodation images",
						"type": "file"
					},
					{
						"name": "amenities",
						"in": "formData",
						"description": "Accomodation amenities",
						"type": "array"
					},
					{
						"name": "geoCoordinates",
						"in": "formData",
						"description": "Longitute and latitude coordinates of accommodation",
						"type": "array"
					},
					{
						"name": "streetAddress",
						"in": "formData",
						"description": "street number",
						"type": "string"
					},
					{
						"name": "approvalStatus",
						"in": "formData",
						"description": "pending,accepted or rejected",
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "Accomodation updated successfully!"
					},
					"404": {
						"description": "accomodation with that ID not found"
					}
				},
				"security": [
					{
					  "Bearer": []
					}
				  ]
			},
			"delete": {
				"tags": ["Accommodations CRUD Operations"],
				"summary": "This will delete an accomodation with given ID",
				"description": " ",
				"produces": ["application/json"],
				"parameters": [
					{
						"name": "accommodationId",
						"in": "path",
						"descrpition": "Please enter accomodation ID here",
						"required": true,
						"type": "integer"
					}
				],
				"responses": {
					"200": {
						"description": "Accomodation deleted Successfuly"
					},
					"404": {
						"description": "Accomodation not found"
					}
				},
				"security": [
					{
					  "Bearer": []
					}
				  ]
			}
		},
		"/api/v1/rooms": {
			"post": {
				"tags": ["Rooms CRUD Operations"],
				"summary": "Add a room",
				"description": "add a room to accommodation",
				"parameters": [
					{
						"name": "body",
						"in": "body",
						"description": "Send a message",
						"required": true,
						"schema": {
							"$ref": "#/definitions/Room"
						}
					}
				],
				"responses": {
					"201": {
						"description": "Room added to accommodation successfuly!"
					},
					"500": {
						"description": "Server error!"
					}
				},
				"security": [
					{
					  "Bearer": []
					}
				  ]
			}
		},
		"/api/v1/accommodations/{accommodationId}/rooms": {
			"get": {
				"tags": ["Rooms CRUD Operations"],
				"summary": "Get all rooms of an accammodation",
				"description": "get all rooms in a single accommodation",
				"produces": ["application/json"],
				"parameters": [
					{
						"name": "accommodationId",
						"in": "path",
						"description": " Enter accommodation ID",
						"required": true,
						"type": "integer"
					}
				],
				"responses": {
					"200": {
						"description": "All rooms retrieved successfuly!"
					}
				}
			}
		},
		"/api/v1/rooms/{roomId}": {
			"get": {
				"tags": ["Rooms CRUD Operations"],
				"summary": "This will retrieve a room with given ID",
				"description": "retrieve a single room ",
				"produces": ["application/json"],
				"parameters": [
					{
						"name": "roomId",
						"in": "path",
						"description": " Enter a room ID",
						"required": true,
						"type": "integer"
					}
				],
				"responses": {
					"200": {
						"description": "room retrieved successfully!"
					},
					"404": {
						"description": "no room found with that ID"
					}
				}
			},
			"patch": {
				"tags": ["Rooms CRUD Operations"],
				"summary": "uptade a room",
				"description": "update a room",
				"parameters": [
					{
						"name": "roomId",
						"in": "path",
						"description": " Enter a room ID",
						"required": true,
						"type": "integer"
					},
					{
						"name": "body",
						"in": "body",
						"description": "Enter the updates",
						"required": true,
						"schema": {
							"$ref": "#/definitions/Room"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Room updated successfuly!"
					},
					"500": {
						"description": "Server error!"
					}
				},
				"security": [
					{
					  "Bearer": []
					}
				  ]
			},
			"delete": {
				"tags": ["Rooms CRUD Operations"],
				"summary": "This will delete a room with given ID",
				"description": "Delete a room",
				"produces": ["application/json"],
				"parameters": [
					{
						"name": "roomId",
						"in": "path",
						"descrpition": "Please enter a room ID here",
						"required": true,
						"type": "integer"
					}
				],
				"responses": {
					"200": {
						"description": "Room deleted Successfuly"
					},
					"404": {
						"description": "Room not found"
					}
				},
				"security": [
					{
					  "Bearer": []
					}
				  ]
			}
		},
		"/api/v1/locations": {
			"post": {
				"tags": ["Locations"],
				"summary": "Add a location",
				"description": "add a location ",
				"parameters": [
					{
						"name": "body",
						"in": "body",
						"description": "add a location",
						"required": true,
						"schema": {
							"$ref": "#/definitions/Location"
						}
					}
				],
				"responses": {
					"201": {
						"description": "Location added successfuly!"
					},
					"500": {
						"description": "Server error!"
					}
				},
				"security": [
					{
					  "Bearer": []
					}
				  ]
			}
		},
		"/api/v1/locations/{locationId}": {
			"get": {
				"tags": ["Locations"],
				"summary": "This will retrieve a location with given ID",
				"description": "retrieve a single location ",
				"produces": ["application/json"],
				"parameters": [
					{
						"name": "locationId",
						"in": "path",
						"description": " Enter a location ID",
						"required": true,
						"type": "integer"
					}
				],
				"responses": {
					"200": {
						"description": "location retrieved successfully!"
					},
					"404": {
						"description": "no location found with that ID"
					}
				}
			},
			"patch": {
				"tags": ["Locations"],
				"summary": "uptade a location",
				"description": "update a location",
				"parameters": [
					{
						"name": "locationId",
						"in": "path",
						"description": " Enter a location ID",
						"required": true,
						"type": "integer"
					},
					{
						"name": "body",
						"in": "body",
						"description": "Enter the location updates",
						"required": true,
						"schema": {
							"$ref": "#/definitions/Location"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Location updated successfuly!"
					},
					"500": {
						"description": "Server error!"
					}
				},
				"security": [
					{
					  "Bearer": []
					}
				  ]
			},
			"delete": {
				"tags": ["Locations"],
				"summary": "This will delete a location with given ID",
				"description": "Delete a location",
				"produces": ["application/json"],
				"parameters": [
					{
						"name": "locationId",
						"in": "path",
						"descrpition": "Please enter a location ID here",
						"required": true,
						"type": "integer"
					}
				],
				"responses": {
					"200": {
						"description": "Location deleted Successfuly"
					},
					"404": {
						"description": "Location not found"
					}
				},
				"security": [
					{
					  "Bearer": []
					}
				  ]
			}
		}
	},

	"definitions": {
		"Register": {
			"type": "object",
			"in": "body",
			"required": ["names", "email", "password"],
			"properties": {
				"names": {
					"type": "string"
				},
				"email": {
					"type": "string"
				},
				"password": {
					"type": "string"
				}
			}
		},
		"Login": {
			"type": "object",
			"in": "body",
			"required": ["email", "password"],
			"properties": {
				"email": {
					"type": "string"
				},
				"password": {
					"type": "string"
				}
			}
		},
		"UpdateRole": {
            "type": "object",
            "in":"body",
            "required": [ "email", "role"],
            "properties": {
                  "email": {
                      "type": "string"
                  }
                 
              }
          },
		"refreshToken": {
			"type": "object",
			"in": "body",
			"required": ["refreshToken"],
			"properties": {
				"refreshToken": {
					"type": "string"
				}
			}
		},"trip": {
            "type": "object",
            "in": "body",
            "properties": {
                "departLocation": {
                    "type": "integer"
                },
                "arrivalLocation": {
                    "type": "integer"
                },
                "tripReason": {
                    "type": "string"
                },
                "departDate": {
                    "type": "string"
                },
                "returnDate": {
                    "type": "string"
                },
                "accomodationId": {
                    "type": "integer"
                }
                
            }
        },
		"Room": {
			"type": "object",
			"required": [
				"roomType",
				"roomNumber",
				"price",
				"currency",
				"accommodationId"
			],
			"properties": {
				"roomType": {
					"type": "string"
				},
				"roomNumber": {
					"type": "string"
				},
				"price": {
					"type": "integer"
				},
				"currency": {
					"type": "string"
				},
				"isAvailable": {
					"type": "boolean"
				},
				"accommodationId": {
					"type": "integer"
				}
			}
		},
		"Location": {
			"type": "object",
			"properties": {
				"locationName": {
					"type": "string"
				},
				"description": {
					"type": "string"
				},
				"country": {
					"type": "string"
				}
			}
		}
	}
}
